import React, { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { useNavigate } from 'react-router-dom';
import { Check, RotateCcw, Trophy, Camera } from 'lucide-react';
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import type { Tables } from "@/integrations/supabase/types";
import CameraCapture from "@/components/CameraCapture";

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
interface Question {
  id: number;
  text: string;
  options: string[];
  correctAnswer: string;
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –∏–∑ Supabase –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
type QuizResult = Tables<'quiz_results'>;

const Quiz = () => {
  const [playerName, setPlayerName] = useState('');
  const [quizStarted, setQuizStarted] = useState(false);
  const [questions, setQuestions] = useState<Question[]>([]);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);
  const [score, setScore] = useState(0);
  const [loading, setLoading] = useState(true);
  const [completed, setCompleted] = useState(false);
  const [lastResultId, setLastResultId] = useState<number | null>(null);
  const [showCamera, setShowCamera] = useState(false);

  const navigate = useNavigate();
  const { toast } = useToast();

  useEffect(() => {
    fetchQuestions();
  }, []);

  const fetchQuestions = async () => {
    setLoading(true);
    try {
      // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
      const response = await fetch('/questions.json');
      const data = await response.json();
      setQuestions(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const startQuiz = () => {
    if (playerName.trim() === '') {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è",
        duration: 3000,
      });
      return;
    }
    setQuizStarted(true);
    setCurrentQuestion(0);
    setScore(0);
    setSelectedAnswer(null);
    setCompleted(false);
  };

  const handleAnswerSelect = (answer: string) => {
    setSelectedAnswer(answer);
  };

  const nextQuestion = async () => {
    if (!selectedAnswer) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç",
        duration: 3000,
      });
      return;
    }

    if (selectedAnswer === questions[currentQuestion].correctAnswer) {
      setScore(score + 1);
    }

    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedAnswer(null);
    } else {
      setCompleted(true);
      await saveResults();
    }
  };

  const saveResults = async () => {
    console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
    try {
      const percentage = Math.round((score / questions.length) * 100);
      const { data, error } = await supabase
        .from('quiz_results')
        .insert([
          {
            player_name: playerName,
            score: score,
            total_questions: questions.length,
            percentage: percentage,
            completed_at: new Date().toISOString(),
          },
        ])
        .select()
        .single();

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
        toast({
          title: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
          description: `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${error.message}`,
          variant: "destructive"
        });
      } else {
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', data);
        setLastResultId(data.id);
        toast({
          title: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
          description: "–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
        });
      }
    } catch (err) {
      console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', err);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
        variant: "destructive"
      });
    }
  };

  const handlePhotoTaken = async (photoUrl: string) => {
    console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ñ–æ—Ç–æ:', photoUrl);
    
    if (lastResultId) {
      try {
        const { error } = await supabase
          .from('quiz_results')
          .update({ photo_url: photoUrl })
          .eq('id', lastResultId);

        if (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ:', error);
          toast({
            title: "–û—à–∏–±–∫–∞",
            description: `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ: ${error.message}`,
            variant: "destructive"
          });
        } else {
          console.log('–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ');
          toast({
            title: "–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
            description: "–í–∞—à–µ —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º!",
          });
        }
      } catch (err) {
        console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ:', err);
      }
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 p-4">
      <div className="max-w-3xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-center text-gray-800 mb-2">
            –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ Lenovo
          </h1>
          <p className="text-center text-gray-600">
            –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ Lenovo!
          </p>
        </div>

        {!quizStarted ? (
          <Card className="shadow-2xl">
            <CardHeader className="bg-gradient-to-r from-purple-500 to-indigo-500 text-white rounded-t-lg">
              <CardTitle className="text-2xl font-bold text-center">
                –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
              </CardTitle>
            </CardHeader>
            <CardContent className="p-8">
              <div className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="name">–í–∞—à–µ –∏–º—è</Label>
                  <Input
                    type="text"
                    id="name"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                    value={playerName}
                    onChange={(e) => setPlayerName(e.target.value)}
                  />
                </div>
                <Button 
                  onClick={startQuiz}
                  className="w-full bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-lg py-3"
                >
                  –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
                </Button>
              </div>
            </CardContent>
          </Card>
        ) : currentQuestion < questions.length ? (
          <Card className="shadow-2xl">
            <CardHeader className="bg-gradient-to-r from-purple-500 to-indigo-500 text-white rounded-t-lg">
              <CardTitle className="text-xl font-semibold">
                –í–æ–ø—Ä–æ—Å {currentQuestion + 1}/{questions.length}
              </CardTitle>
            </CardHeader>
            <CardContent className="p-8">
              <div className="space-y-6">
                <p className="text-gray-700 text-lg">{questions[currentQuestion].text}</p>
                <RadioGroup onValueChange={handleAnswerSelect} value={selectedAnswer || ''}>
                  <div className="grid gap-2">
                    {questions[currentQuestion].options.map((option) => (
                      <div key={option} className="flex items-center space-x-2">
                        <RadioGroupItem value={option} id={option} className="peer h-5 w-5 shrink-0 rounded-full border-2 border-gray-300 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground" />
                        <Label htmlFor={option} className="cursor-pointer peer-checked:font-semibold">
                          {option}
                        </Label>
                      </div>
                    ))}
                  </div>
                </RadioGroup>
                <Button 
                  onClick={nextQuestion}
                  className="w-full bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-lg py-3"
                >
                  {currentQuestion === questions.length - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å' : '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'}
                </Button>
              </div>
            </CardContent>
          </Card>
        ) : (
          <Card className="shadow-2xl">
            <CardHeader className="bg-gradient-to-r from-green-500 to-blue-500 text-white rounded-t-lg">
              <CardTitle className="text-2xl font-bold text-center">
                üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
              </CardTitle>
            </CardHeader>
            <CardContent className="p-8 text-center">
              <div className="space-y-6">
                <div className="text-6xl mb-4">
                  {score >= 9 ? 'üèÜ' : score >= 7 ? 'ü•á' : score >= 5 ? 'ü•à' : 'ü•â'}
                </div>
                
                <div>
                  <h3 className="text-3xl font-bold text-gray-800 mb-2">
                    –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{questions.length}
                  </h3>
                  <p className="text-xl text-gray-600">
                    {Math.round((score / questions.length) * 100)}% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                  </p>
                </div>

                <div className="p-4 bg-gray-50 rounded-lg">
                  <p className="text-lg text-gray-700">
                    {score >= 9 ? '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã –æ—Ç–ª–∏—á–Ω–æ –∑–Ω–∞–µ—Ç–µ Lenovo!' :
                     score >= 7 ? '–û—Ç–ª–∏—á–Ω–æ! –£ –≤–∞—Å —Ö–æ—Ä–æ—à–∏–µ –∑–Ω–∞–Ω–∏—è –æ Lenovo!' :
                     score >= 5 ? '–•–æ—Ä–æ—à–æ! –ï—Å—Ç—å —á—Ç–æ –∏–∑—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ.' :
                     '–°—Ç–æ–∏—Ç –±–æ–ª—å—à–µ —É–∑–Ω–∞—Ç—å –æ –∫–æ–º–ø–∞–Ω–∏–∏ Lenovo!'}
                  </p>
                </div>

                <div className="flex flex-col space-y-3">
                  <Button 
                    onClick={() => setShowCamera(true)}
                    className="bg-purple-600 hover:bg-purple-700 text-lg py-3"
                    size="lg"
                  >
                    <Camera className="mr-2 h-5 w-5" />
                    –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ
                  </Button>
                  
                  <Button 
                    onClick={() => navigate('/results')}
                    variant="outline"
                    className="text-lg py-3"
                    size="lg"
                  >
                    <Trophy className="mr-2 h-5 w-5" />
                    –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                  </Button>
                  
                  <Button 
                    onClick={() => window.location.reload()}
                    variant="outline"
                    className="text-lg py-3"
                    size="lg"
                  >
                    <RotateCcw className="mr-2 h-5 w-5" />
                    –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>

      {showCamera && (
        <CameraCapture 
          onPhotoTaken={handlePhotoTaken}
          onClose={() => setShowCamera(false)}
        />
      )}
    </div>
  );
};

export default Quiz;
